"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
import json

from telegram import Update, Bot as TelegramBot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

from globals import BOT_TOKEN, CHAT_ID, MESSAGE_FORMATS

logger = logging.getLogger(name)

class TelegramBotHandler:
    def init(self, token: str, chat_id: int):
        self.token = token
        self.chat_id = chat_id
        self.bot = None
        self.application = None
        self.is_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.sent_messages = 0
        self.errors_count = 0
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(self.token).build()
            self.bot = self.application.bot
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self.test_connection()
            
            logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            raise
            
    async def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        try:
            me = await self.bot.get_me()
            logger.info(f"ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É: @{me.username}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.send_message("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è... OK")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
            
    async def send_message(self, text: str, parse_mode: str = ParseMode.MARKDOWN) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode=parse_mode
            )
            
            self.sent_messages += 1
            logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.errors_count += 1
            return False
            
    async def send_signal(self, signal_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = MESSAGE_FORMATS['signal'].format(
                pair=signal_data['pair'],
                timeframe=signal_data['timeframe'],
                accuracy=signal_data['accuracy'],
                entry_time=signal_data['entry_time'],
                hold_duration=signal_data['hold_duration'],
                vwap_gradient=signal_data.get('vwap_gradient', 0),
                volume_tsunami=signal_data.get('volume_tsunami', 0),
                neural_macd=signal_data.get('neural_macd', 0),
                quantum_rsi=signal_data.get('quantum_rsi', 0),
                ai_score=signal_data.get('ai_score', 0),
                direction=signal_data['direction']
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
            success = await self.send_message(message)
            
            if success:
                logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {signal_data['pair']} {signal_data['timeframe']}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {signal_data['pair']} {signal_data['timeframe']}")
                
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
            
    async def send_daily_stats(self, stats: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä
            best_pairs_text = ""
            for pair in stats.get('best_pairs', []):
                best_pairs_text += f"‚Ä¢ {pair['pair']}: {pair['accuracy']:.1f}% ({pair['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤)\n"
                
            if not best_pairs_text:
                best_pairs_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = MESSAGE_FORMATS['daily_stats'].format(
                signals_count=stats.get('total_signals', 0),
                successful_signals=stats.get('successful_signals', 0),
                accuracy=stats.get('accuracy', 0),
                avg_profit=stats.get('avg_profit', 0),
                best_pairs=best_pairs_text
            )
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
            
    async def send_error(self, module: str, error: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = MESSAGE_FORMATS['error'].format(
                module=module,
                error=error,
                timestamp=datetime.now().strftime('%H:%M:%S')
            )
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False
            
    async def send_status(self, status_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            message = MESSAGE_FORMATS['status'].format(
                uptime=status_data.get('uptime', 'N/A'),
                pairs_count=status_data.get('pairs_count', 0),
                timeframes_count=status_data.get('timeframes_count', 0),
                current_accuracy=status_data.get('current_accuracy', 0),
                signals_per_hour=status_data.get('signals_per_hour', 0)
            )
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
            
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            from bot_control import BotController
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏–∑ globals
            import globals
            if hasattr(globals, 'bot_controller'):
                controller = globals.bot_controller
                await controller.start_trading()
                
                await update.message.reply_text(

"üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!**\n\n"
                    "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–∞—á–∞—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã...",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
            
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop"""
        try:
            from bot_control import BotController
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏–∑ globals
            import globals
            if hasattr(globals, 'bot_controller'):
                controller = globals.bot_controller
                await controller.stop_trading()
                
                await update.message.reply_text(
                    "üõë **–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n"
                    "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
            
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            import globals
            
            status_data = {
                'uptime': 'N/A',
                'pairs_count': len(globals.TRADING_PAIRS),
                'timeframes_count': len(globals.TIMEFRAMES),
                'current_accuracy': globals.performance_stats.get('accuracy', 0),
                'signals_per_hour': globals.performance_stats.get('hourly_signals', 0)
            }
            
            await self.send_status(status_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
            
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            import globals
            
            stats = {
                'total_signals': globals.performance_stats.get('total_signals', 0),
                'successful_signals': globals.performance_stats.get('successful_signals', 0),
                'accuracy': globals.performance_stats.get('accuracy', 0),
                'avg_profit': 0.0,
                'best_pairs': []
            }
            
            await self.send_daily_stats(stats)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
            
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞:

/start - –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: Quantum Precision V2
üéØ –¶–µ–ª—å: 85%+ —Ç–æ—á–Ω–æ—Å—Ç—å
üìà –°–∏–≥–Ω–∞–ª—ã: 30-35 –≤ –¥–µ–Ω—å
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: Automatic Trading System
            """
            
            await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
            )
            
    async def run(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            if self.is_running:
                return
                
            self.is_running = True
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –±–µ–∑ polling –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.send_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏.")
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            while self.is_running:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.shutdown()
            
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            if not self.is_running:
                return
                
            self.is_running = False
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            
            if self.application:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
                
            logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")
            
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        return {
            'sent_messages': self.sent_messages,
            'errors_count': self.errors_count,
            'is_running': self.is_running,
            'chat_id': self.chat_id
        }
